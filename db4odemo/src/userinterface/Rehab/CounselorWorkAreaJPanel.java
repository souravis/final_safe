/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Rehab;

import Business.Enterprise.Enterprise;
import Business.Enterprise.RehabCentreEnterprise;
import Business.Organization.CounselorOrganization;
import Business.Organization.Organization;
import Business.Patient.Assessment;
import Business.Patient.Patient;
import Business.Patient.PatientRequestStatus;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientEvaluationWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import UserInterface.Clinic.PatientHistoryJPanel;
import java.awt.CardLayout;
import java.util.List;
import java.util.stream.Collectors;

/**
 *
 * @author tarun
 */
public class CounselorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form CounselorWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private CounselorOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Patient patient;

    public CounselorWorkAreaJPanel(JPanel userProcessContainer, Organization organization, Enterprise enterprise, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = (CounselorOrganization) organization;
        this.enterprise = (RehabCentreEnterprise) enterprise;
        this.userAccount = userAccount;
        organizationName.setText(organization.getName());
        counselorName.setText(userAccount.getFirstName());
        populateRequestTable();
        setSize(1200, 1200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) counselorWorkTable.getModel();

        model.setRowCount(0);

        List<WorkRequest> allWorkRequests = organization.getWorkQueue().getWorkRequestList().stream()
                .filter(pr -> populateRequestForCounselor((PatientEvaluationWorkRequest) pr))
                .collect(Collectors.toList());

        for (WorkRequest request : allWorkRequests) {
            Object[] row = new Object[6];
            PatientEvaluationWorkRequest patientRequest = (PatientEvaluationWorkRequest) request;
            Assessment assessment = patientRequest.getAssessment();
            row[0] = patientRequest;
            if (assessment.getDoctor() != null) {
                row[1] = assessment.getDoctor().getFirstName();
            } else {
                row[1] = " ";
            }
            UserAccount counselor = assessment.getCounsellor();
            if (null != counselor) {
                row[2] = counselor.getFirstName();
            } else {

                row[2] = "";
            }
            row[3] = assessment.getScore();
            row[4] = assessment.getZone();
            row[5] = patientRequest.getPatientRequestStatus().getValue();
            model.addRow(row);
        }
    }

    private boolean populateRequestForCounselor(PatientEvaluationWorkRequest patientRequest) {

        Assessment assessment = patientRequest.getAssessment();
        PatientRequestStatus patientRequestStatus = patientRequest.getPatientRequestStatus();
        boolean isCounselorAlreadyAssigned = assessment.getCounsellor() != null;

        if (isCounselorAlreadyAssigned && !assessment.getCounsellor().getUsername().equals(userAccount.getUsername())) {

            return false;

        }
        if (patientRequestStatus == PatientRequestStatus.Completed) {

            return false;
        }
        return true;

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        counselorWorkTable = new javax.swing.JTable();
        assignToMeButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        organizationName = new javax.swing.JLabel();
        counselorName = new javax.swing.JLabel();
        btnProvideCounselling = new javax.swing.JButton();
        btnPatientHistory = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Counselor Work Area");

        counselorWorkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient ", "Doctor", "Counselor", "Score", "Zone", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(counselorWorkTable);

        assignToMeButton.setText("Assign To Me");
        assignToMeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignToMeButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Organization:");

        jLabel3.setText("Counselor:");

        organizationName.setText("<value>");

        counselorName.setText("<value>");

        btnProvideCounselling.setText("Provide Counselling");
        btnProvideCounselling.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProvideCounsellingActionPerformed(evt);
            }
        });

        btnPatientHistory.setText("View Patient History");
        btnPatientHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPatientHistoryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(344, 344, 344)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(organizationName, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                            .addComponent(counselorName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(assignToMeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(151, 151, 151)
                                .addComponent(btnPatientHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(164, 164, 164)
                                .addComponent(btnProvideCounselling))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 833, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(29, 29, 29))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1)
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(organizationName))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(counselorName))
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnProvideCounselling)
                        .addComponent(btnPatientHistory))
                    .addComponent(assignToMeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(733, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignToMeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignToMeButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = counselorWorkTable.getSelectedRow();
        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) counselorWorkTable.getValueAt(selectedrow, 0);
            Assessment assessment = request.getAssessment();

            if (request.getPatientRequestStatus().getValue().equals(PatientRequestStatus.Completed.getValue())) {
                JOptionPane.showMessageDialog(null, "Assessment  Completed For the selected Request", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;

            }

            if (assessment.getCounsellor() != null) {

                JOptionPane.showMessageDialog(null, "Counselor is already Assigned for the Assessment!!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            assessment.setCounsellor(userAccount);
            request.getPatient().setCouncellor(userAccount);
            populateRequestTable();

        } else {
            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_assignToMeButtonActionPerformed

    private void btnProvideCounsellingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProvideCounsellingActionPerformed
        // TODO add your handling code here:

        int selectedrow = counselorWorkTable.getSelectedRow();

        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) counselorWorkTable.getValueAt(selectedrow, 0);

            if (request.getAssessment().getCounsellor() == null) {

                JOptionPane.showMessageDialog(null, "Please assign the request first", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            if (request.getPatientRequestStatus().getValue().equals(PatientRequestStatus.Completed.getValue())) {
                JOptionPane.showMessageDialog(null, "Assessment  Completed For the selected Request", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;

            }
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            CounselorAssessmentJPanel counselorAssessmentJPanel = new CounselorAssessmentJPanel(userProcessContainer, userAccount, enterprise, request);
            userProcessContainer.add("PatientHistoryJPanel", counselorAssessmentJPanel);
            layout.next(userProcessContainer);

        } else {
            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_btnProvideCounsellingActionPerformed

    private void btnPatientHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPatientHistoryActionPerformed
        // TODO add your handling code here:
        int selectedrow = counselorWorkTable.getSelectedRow();
        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) counselorWorkTable.getValueAt(selectedrow, 0);
            Assessment assessment = request.getAssessment();

            if (assessment.getCounsellor() == null) {
                JOptionPane.showMessageDialog(null, "Please Assign the request First !!!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;

            }

            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("PatientHistoryJPanel", new PatientHistoryJPanel(userProcessContainer, userAccount, enterprise, request.getPatient()));
            layout.next(userProcessContainer);
        } else {

            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_btnPatientHistoryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton assignToMeButton;
    javax.swing.JButton btnPatientHistory;
    javax.swing.JButton btnProvideCounselling;
    javax.swing.JLabel counselorName;
    javax.swing.JTable counselorWorkTable;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JLabel organizationName;
    // End of variables declaration//GEN-END:variables
}
