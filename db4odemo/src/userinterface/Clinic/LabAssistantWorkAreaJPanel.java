/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Clinic;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.Patient.Assessment;
import Business.Patient.PatientDirectory;
import Business.Patient.PatientRequestStatus;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PatientEvaluationWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tarun
 */
public class LabAssistantWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private Enterprise enterprise;
    private Organization organization;
    private UserAccount account;
    private EcoSystem system;
    private PatientDirectory patientDirectory;

    public LabAssistantWorkAreaJPanel(JPanel userProcessContainer, Enterprise enterprise, Organization organization, UserAccount account) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.organization = organization;
        this.account = account;
        this.system = EcoSystem.getInstance();
        this.patientDirectory = new PatientDirectory();
        organizationName.setText(organization.getName());
        labassistantName.setText(account.getFirstName());
        setSize(1200, 1200);
        populateRequestTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) labWorkTable.getModel();
        model.setRowCount(0);

        List<WorkRequest> allWorkRequests = organization.getWorkQueue().getWorkRequestList().stream()
                .filter(pr -> populateRequestForLabAssistant((PatientEvaluationWorkRequest) pr))
                .collect(Collectors.toList());

        for (WorkRequest request : allWorkRequests) {
            Object[] row = new Object[4];

            PatientEvaluationWorkRequest patientRequest = (PatientEvaluationWorkRequest) request;

            Assessment assessment = patientRequest.getAssessment();

            UserAccount labAssistant = assessment.getLabAssistant();
            if (null != labAssistant) {
                row[2] = labAssistant.getFirstName();
            } else {
                row[2] = "";
            }
            row[0] = patientRequest;
            row[1] = assessment.getDoctor().getFirstName();
            row[3] = patientRequest.getPatientRequestStatus();
            model.addRow(row);
        }
    }

    private boolean populateRequestForLabAssistant(PatientEvaluationWorkRequest patientRequest) {

        Assessment assessment = patientRequest.getAssessment();
        PatientRequestStatus patientRequestStatus = patientRequest.getPatientRequestStatus();

        boolean isLabAssistantAlreadyAssigned = assessment.getLabAssistant() != null;

        if (isLabAssistantAlreadyAssigned && !assessment.getLabAssistant().getUsername().equals(account.getUsername())) {

            return false;

        }
        if (patientRequestStatus != PatientRequestStatus.RequestLabTest) {

            return false;
        }
        return true;
    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        organizationName = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        labWorkTable = new javax.swing.JTable();
        assignButton = new javax.swing.JButton();
        performTestButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        labassistantName = new javax.swing.JLabel();

        jLabel2.setText("Organization:");

        organizationName.setText("<value>");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Lab Assistant Work Area ");

        labWorkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient", "Doctor", "Lab Assistant", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(labWorkTable);

        assignButton.setText("Assign To Me");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        performTestButton.setText("Perform Test");
        performTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                performTestButtonActionPerformed(evt);
            }
        });

        jLabel6.setText("Lab Assistant:");

        labassistantName.setText("<value>");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(200, 200, 200)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(20, 20, 20)
                                .addComponent(organizationName, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(18, 18, 18)
                                .addComponent(labassistantName, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(assignButton, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(339, 339, 339)
                                    .addComponent(performTestButton))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(65, 65, 65))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(organizationName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(labassistantName))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignButton)
                    .addComponent(performTestButton))
                .addGap(30, 30, 30))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = labWorkTable.getSelectedRow();
        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) labWorkTable.getValueAt(selectedrow, 0);

            Assessment assessment = request.getAssessment();
            if (assessment.getLabAssistant() != null) {
                JOptionPane.showMessageDialog(null, "Lab Assistant is already Assigned for the Assessment!!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            request.setLastModifiedDate(new Date());
            assessment.setLabAssistant(account);
            request.getPatient().setLabAssistantInAssessment(account);
            populateRequestTable();
        } else {

            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);

        }
    }//GEN-LAST:event_assignButtonActionPerformed

    private void performTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_performTestButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = labWorkTable.getSelectedRow();

        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) labWorkTable.getValueAt(selectedrow, 0);
            // ((PatientEvaluationWorkRequest) request).setPatientRequestStatus(PatientRequestStatus.RequestLabTest);
            if (request.getPatientRequestStatus() == PatientRequestStatus.LabTestDone) {
                JOptionPane.showMessageDialog(null, " Lab Test Already Performed!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else if (request.getPatientRequestStatus() == PatientRequestStatus.Completed) {
                JOptionPane.showMessageDialog(null, " Lab Test Report Already Generated!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else {
                CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                userProcessContainer.add("LabAssessmentJPanel", new LabAssessmentJPanel(userProcessContainer, account, enterprise, request));
                layout.next(userProcessContainer);
            }
        } else {
            JOptionPane.showMessageDialog(null, " Please select a row!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_performTestButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton assignButton;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel6;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JTable labWorkTable;
    javax.swing.JLabel labassistantName;
    javax.swing.JLabel organizationName;
    javax.swing.JButton performTestButton;
    // End of variables declaration//GEN-END:variables

}
