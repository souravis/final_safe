/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Clinic;

import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.LabOrganization;
import Business.Organization.PrimaryCareOrganization;
import Business.Patient.Assessment;
import Business.Patient.Patient;
import Business.Patient.PatientRequestStatus;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.*;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;

/**
 *
 * @author tarun
 */
public class DoctorWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form DoctorWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private PrimaryCareOrganization organization;
    private Enterprise enterprise;
    private UserAccount userAccount;
    private Patient patient;
    private Network network;

    public DoctorWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, Network network, PrimaryCareOrganization organization, Enterprise enterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organization = organization;
        this.enterprise = enterprise;
        this.userAccount = account;
        this.network = network;
        organizationName.setText(organization.getName());
        doctorName.setText(userAccount.getFirstName());
        populateRequestTable();
        setSize(1200, 1200);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    public void populateRequestTable() {
        DefaultTableModel model = (DefaultTableModel) docworkTable.getModel();
        model.setRowCount(0);

        List<WorkRequest> allWorkRequests = organization.getWorkQueue().getWorkRequestList().stream()
                .filter(pr -> showRequestsToDoctor((PatientEvaluationWorkRequest) pr))
                .collect(Collectors.toList());
        for (WorkRequest request : allWorkRequests) {
            Object[] row = new Object[6];
            PatientEvaluationWorkRequest patientRequest = (PatientEvaluationWorkRequest) request;

            Assessment assessment = patientRequest.getAssessment();

            row[0] = patientRequest;
            row[1] = assessment.getNurse().getFirstName();

            UserAccount doctor = assessment.getDoctor();

            if (null != doctor) {
                row[2] = doctor.getFirstName();
            } else {

                row[2] = "";
            }
            row[3] = assessment.getScore();
            row[4] = assessment.getZone();
            row[5] = patientRequest.getPatientRequestStatus();
            model.addRow(row);
        }
    }

    private boolean showRequestsToDoctor(PatientEvaluationWorkRequest patientRequest) {

        Assessment assessment = patientRequest.getAssessment();
        PatientRequestStatus patientRequestStatus = patientRequest.getPatientRequestStatus();
        boolean isDoctorAlreadyAssigned = assessment.getDoctor() != null;

        if (isDoctorAlreadyAssigned && !assessment.getDoctor().getUsername().equals(userAccount.getUsername())) {
            return false;
        }

        if (patientRequestStatus == PatientRequestStatus.Completed || patientRequestStatus == PatientRequestStatus.Discharged || patientRequestStatus == PatientRequestStatus.Recommended_Rehab) {

            return false;
        }
        return true;

    }

    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        docworkTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        organizationName = new javax.swing.JLabel();
        btnRequestLabTest = new javax.swing.JButton();
        btnViewResult = new javax.swing.JButton();
        patientHistoryButton = new javax.swing.JButton();
        btnassigntome = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        doctorName = new javax.swing.JLabel();
        viewButton = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        docworkTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Nurse Name", "Doctor Name", "Score", "Zone", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        docworkTable.setToolTipText("");
        jScrollPane1.setViewportView(docworkTable);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Doctor Work Area ");

        jLabel2.setText("Organization:");

        organizationName.setText("<value>");

        btnRequestLabTest.setText("Request Lab Test");
        btnRequestLabTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRequestLabTestActionPerformed(evt);
            }
        });

        btnViewResult.setText("View Result");
        btnViewResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewResultActionPerformed(evt);
            }
        });

        patientHistoryButton.setText("View Patient History");
        patientHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientHistoryButtonActionPerformed(evt);
            }
        });

        btnassigntome.setText("Assign to me");
        btnassigntome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnassigntomeActionPerformed(evt);
            }
        });

        jLabel4.setText("Doctor:");

        doctorName.setText("<value>");

        viewButton.setText("View Assessment Detail");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(199, 199, 199)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(294, 294, 294))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(viewButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(patientHistoryButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGap(63, 63, 63)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(btnassigntome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnRequestLabTest, javax.swing.GroupLayout.DEFAULT_SIZE, 164, Short.MAX_VALUE))
                                    .addGap(63, 63, 63)
                                    .addComponent(btnViewResult, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(72, 72, 72))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(29, 29, 29)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(organizationName, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(doctorName, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(182, 182, 182))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel1)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(organizationName))
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(doctorName))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnassigntome)
                    .addComponent(viewButton))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewResult)
                    .addComponent(btnRequestLabTest)
                    .addComponent(patientHistoryButton))
                .addGap(142, 142, 142))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewResultActionPerformed
        // TODO add your handling code here:

        int selectedrow = docworkTable.getSelectedRow();
        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) docworkTable.getValueAt(selectedrow, 0);
            Assessment assessment = request.getAssessment();
            if (assessment.getDoctor() == null) {
                JOptionPane.showMessageDialog(null, "Please Assign the request First !!!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;

            }
            userProcessContainer.add("DoctorAssesmentJPanel", new DoctorAssesmentJPanel(userProcessContainer, userAccount, network, enterprise, request));
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            layout.next(userProcessContainer);

        } else {

            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }


    }//GEN-LAST:event_btnViewResultActionPerformed

    private void patientHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientHistoryButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = docworkTable.getSelectedRow();
        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) docworkTable.getValueAt(selectedrow, 0);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            userProcessContainer.add("PatientHistoryJPanel", new PatientHistoryJPanel(userProcessContainer, userAccount, enterprise, request.getPatient()));
            layout.next(userProcessContainer);
        } else {

            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_patientHistoryButtonActionPerformed

    private void btnassigntomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnassigntomeActionPerformed
        // TODO add your handling code here:
        int selectedrow = docworkTable.getSelectedRow();
        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) docworkTable.getValueAt(selectedrow, 0);
            Assessment assessment = request.getAssessment();

            if (assessment.getDoctor() != null) {

                JOptionPane.showMessageDialog(null, "Doctor is already Assigned for the Assessment!!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;
            }

            request.setLastModifiedDate(new Date());
            assessment.setDoctor(userAccount);
            request.getPatient().setDoctorInAssessment(userAccount);
            populateRequestTable();
        } else {
            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnassigntomeActionPerformed

    private void btnRequestLabTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRequestLabTestActionPerformed
        // TODO add your handling code here:
        int selectedrow = docworkTable.getSelectedRow();
        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) docworkTable.getValueAt(selectedrow, 0);
            // ((PatientEvaluationWorkRequest) request).setPatientRequestStatus(PatientRequestStatus.RequestLabTest);

            Assessment assessment = request.getAssessment();

            if (assessment.getDoctor() == null) {
                JOptionPane.showMessageDialog(null, "Please Assign the request First !!!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;

            }

            if (!assessment.getDoctor().getUsername().equals(userAccount.getUsername())) {

                JOptionPane.showMessageDialog(null, "Request Has Already Been Assigned to Another Doctor", "Warning", JOptionPane.INFORMATION_MESSAGE);

            }

            if (request.getPatientRequestStatus() == PatientRequestStatus.LabTestDone) {
                JOptionPane.showMessageDialog(null, " Lab Test Already Performed!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;

            } else if (request.getPatientRequestStatus() == PatientRequestStatus.RequestLabTest) {

                JOptionPane.showMessageDialog(null, " Lab Test Has Already been requested for the assessment!!", "Warning", JOptionPane.INFORMATION_MESSAGE);
                return;
            } else if (request.getPatientRequestStatus() != PatientRequestStatus.LabTestDone) {
                request.setPatientRequestStatus(PatientRequestStatus.RequestLabTest);
                enterprise.getOrganizationDirectory().getOrganizationList().stream()
                        .filter(org -> org instanceof LabOrganization)
                        .findAny()
                        .get()
                        .getWorkQueue()
                        .getWorkRequestList()
                        .add(request);

                populateRequestTable();
                return;

            }
        } else {

            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);

        }

        //userAccount = (UserAccount)docworkTable.getValueAt(selectedrow, 2);

    }//GEN-LAST:event_btnRequestLabTestActionPerformed

    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        // TODO add your handling code here:
        int selectedrow = docworkTable.getSelectedRow();

        if (selectedrow >= 0) {
            PatientEvaluationWorkRequest request = (PatientEvaluationWorkRequest) docworkTable.getValueAt(selectedrow, 0);
            CardLayout layout = (CardLayout) userProcessContainer.getLayout();
            PatientAssessmentDetailJPanel counselorAssessmentJPanel = new PatientAssessmentDetailJPanel(userProcessContainer, userAccount, enterprise, patient, request.getAssessment());
            userProcessContainer.add("PatientHistoryJPanel", counselorAssessmentJPanel);
            layout.next(userProcessContainer);

        } else {
            JOptionPane.showMessageDialog(null, " Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_viewButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btnRequestLabTest;
    javax.swing.JButton btnViewResult;
    javax.swing.JButton btnassigntome;
    javax.swing.JLabel doctorName;
    javax.swing.JTable docworkTable;
    javax.swing.JLabel jLabel1;
    javax.swing.JLabel jLabel2;
    javax.swing.JLabel jLabel3;
    javax.swing.JLabel jLabel4;
    javax.swing.JScrollPane jScrollPane1;
    javax.swing.JLabel organizationName;
    javax.swing.JButton patientHistoryButton;
    javax.swing.JButton viewButton;
    // End of variables declaration//GEN-END:variables
}
